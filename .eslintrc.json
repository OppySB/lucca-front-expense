{
  "ignorePatterns": [],
  "overrides": [
    // SPECIFIC RULES FOR LIB
    {
      "files": [
        "projects/expense-lib/**/*.ts"
      ],
      "excludedFiles": ["**/*.spec.ts", "**/*.d.ts"],
      "extends": [
        "plugin:@angular-eslint/recommended"
      ],
      "rules": {
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "lucca-expense",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "lucca-expense",
            "style": "kebab-case"
          }
        ]
      }
    },
    // SPECIFIC RULES FOR APP
    {
      "files": [
        "projects/expense-app/**/*.ts"
      ],
      "excludedFiles": ["**/*.spec.ts", "**/*.d.ts"],
      "extends": [
        "plugin:@angular-eslint/recommended"
      ],
      "rules": {
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ]
      }
    },
    // GLOBALLY RULES TS
    {
      "files": [
        "*.ts"
      ],
      "excludedFiles": [
        "**/*.spec.ts",
        "**/*.d.ts",
        "projects/expense-lib/src/lib/*-apis/generated/**/*.ts"// ng-swagger-gen generated code,
      ],
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended"
      ],
      "rules": {
        // https://eslint.org/docs/rules/comma-dangle
        // remove not needed comma
        "comma-dangle": ["error", "never"],
        // https://eslint.org/docs/rules/indent
        // configure files indent
        "indent": ["error", 4, {"SwitchCase": 1}],
        // https://eslint.org/docs/rules/linebreak-style
        // not needed
        "linebreak-style": "off",
        // https://eslint.org/docs/rules/max-len
        // line max length configuration
        "max-len": ["error", {
          "code": 160,
          "ignoreStrings": true,
          "ignoreComments": true,
          "ignoreTrailingComments": true,
          "ignoreUrls": true,
          "ignorePattern": "import.*"
        }],
        // https://eslint.org/docs/rules/new-cap
        // function always start with lowercase letter
        // capIsNewExceptionPattern: exclude Angular decorators
        "new-cap": ["error", {"capIsNewExceptionPattern": "@*"}],
        // https://eslint.org/docs/rules/no-invalid-this
        // disabled
        "no-invalid-this": "off",
        // https://eslint.org/docs/rules/object-curly-spacing
        "object-curly-spacing": ["error", "always"],
        // https://eslint.org/docs/rules/padded-blocks
        "padded-blocks": ["error", {
          "classes": "always",
          "blocks": "never",
          "switches": "never"
        }],
        // https://eslint.org/docs/rules/valid-jsdoc
        // deprecated
        "valid-jsdoc": "off",
        // https://eslint.org/docs/rules/require-jsdoc
        // deprecated
        "require-jsdoc": "off",

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/array-type.md
        // prefer use T[] or readonly T[] instead of Array<T> or ReadonlyArray<T>
        "@typescript-eslint/array-type": ["error"],

        // Base rule disabled
        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/dot-notation.md
        // prefer use foo.bar instead of foo["bar"]
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/explicit-function-return-type.md
        // force method to have explicit return type
        "@typescript-eslint/explicit-function-return-type": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/explicit-member-accessibility.md
        // force class property to have explicit accessibility
        "@typescript-eslint/explicit-member-accessibility": ["error"],

        // Base rule disabled
        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/func-call-spacing.md
        // force method call to be fn(args) instead of fn (args) with TS support for generic type
        "func-call-spacing": "off",
        "@typescript-eslint/func-call-spacing": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/init-declarations.md
        // force variable initialization on declaration
        "@typescript-eslint/init-declarations": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-empty-interface.md
        // interface must not be empty
        "@typescript-eslint/no-empty-interface": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-explicit-any.md
        // type "any" cannot be used
        "@typescript-eslint/no-explicit-any": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-for-in-array.md
        // for..in --> object & for..of --> array
        "@typescript-eslint/no-for-in-array": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-invalid-void-type.md
        // allow void type only for method or generic, use undefined otherwise
        "@typescript-eslint/no-invalid-void-type": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-throw-literal.md
        // the throw keywork only work with an Error object
        "@typescript-eslint/no-throw-literal": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unnecessary-boolean-literal-compare.md
        // use unary negation (!variable) instead of comparison (variable === true)
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.md
        // no redundant type between default and provided
        // Example: function f<T = number>() {} | bad: f<number>(); | good: f<string>();
        "@typescript-eslint/no-unnecessary-type-arguments": ["error"],

        // Base rule disabled
        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unused-expressions.md
        // remove unused expression which have no effect
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": ["error"],

        // Base rule disabled
        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-useless-constructor.md
        // remove empty constructor or child constructor which only call super
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-for-of.md
        // use for..of instead of classic iteration
        "@typescript-eslint/prefer-for-of": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-includes.md
        // use includes instead of indexOf, which is more readable
        "@typescript-eslint/prefer-includes": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.md
        // use of || operator treat falsy value ("" or null or undefined) when ?? operator deal with null or undefined only
        "@typescript-eslint/prefer-nullish-coalescing": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-optional-chain.md
        // use optional chaining syntax instead of AND logical
        // Example: foo?.bar instead of foo && foo.bar
        "@typescript-eslint/prefer-optional-chain": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-readonly.md
        // use readonly on private properties when they are not modified
        "@typescript-eslint/prefer-readonly": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-reduce-type-parameter.md
        // use Array#reduce generic parameter instead of cast
        // Example: arr.reduce<number[]>((acc, val) => acc.concat(val), []) instead of arr.reduce((acc, val) => acc.concat(val), [] as number[])
        "@typescript-eslint/prefer-reduce-type-parameter": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-regexp-exec.md
        // prefer RegExp because RegExp#exec is faster than String#match and both work the same when not using the /g flag
        "@typescript-eslint/prefer-regexp-exec": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-string-starts-ends-with.md
        // use String#startWith or String#endWith instead of other ways to get same result
        "@typescript-eslint/prefer-string-starts-ends-with": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/restrict-plus-operands.md
        // use plus operator on same types
        // checkCompoundAssignments: same for += and -= operators
        // Example: "Count " + String(5) instead of "Count: " + 5
        "@typescript-eslint/restrict-plus-operands": ["error",
          {"checkCompoundAssignments": true}],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.md
        // concider all cases in switch or use "default" keyword
        "@typescript-eslint/switch-exhaustiveness-check": ["error"],

        // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.md
        // unified multiple method overloads when possible
        "@typescript-eslint/unified-signatures": ["error"]
      }
    },
    {
      "files": ["*.html", "*.spec.ts"],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {}
    },
    {
      "files": ["**/*.spec.ts", "**/*.d.ts"],
      "extends": ["plugin:jasmine/recommended"],
      "plugins": ["jasmine"],
      "env": {"jasmine": true},
      "rules": {
        "jasmine/new-line-before-expect": "off"
      }
    }
  ]
}
